substitutions:
  device_name: sonoff_pow_washing
  room_name: Study
  io_username: !secret adafruit_io_username
  io_key: !secret adafruit_io_key
  update_interval: 30s
  i2c_scan: "false"
  
esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m
  board_flash_mode: dout  
  esp8266_restore_from_flash: true

# Wifi Config
wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    #hidden: true
  fast_connect: true
  # ...
  ap:
    ssid: ${device_name}
    password: !secret wifi_password

  # Optional manual IP
  manual_ip:
    static_ip: 
    gateway: 
    subnet: 
    dns1: 
    dns2: 
    
captive_portal:

logger:
  # Disable the Serial interface on the POW
  # It is used by the power sensor
  baud_rate: 0

# Enable UART for the power sensor
uart:
  rx_pin: RX
  baud_rate: 4800

# Enable Home Assistant API
api:

# Enable over-the-air updates
ota:

# Enable Web server
web_server:
  port: 80

# Sync time with Home Assistant
## Use time
time:
  - platform: homeassistant
    ## Set your timezone
    timezone: Africa/Johannesburg

# Text sensors with general information
# Text sensors with general information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name}_ip
    ssid:
      name: ${device_name}_ssid
    bssid:
      name: ${device_name}_bssid
  - platform: version
    name: ${device_name}_epshomeversion"

sensor:
  # WiFi Signal sensor
  - platform: wifi_signal
    name: ${device_name} Sensor Wifi Signal
    update_interval: ${update_interval}
    
  - platform: uptime
    name: ${device_name} Sensor Uptime
    
  - platform: cse7766
    update_interval: ${update_interval}
    # Current sensor
    current:
      name: ${device_name}_current
      unit_of_measurement: A
      accuracy_decimals: 3
      filters:
        # Make everything below 0.01A appear as just 0A.
        - lambda: if (x < 0.100) return 0; else return x;
        
    # Voltage sensor
    voltage:
      name: ${device_name}_voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      
    # Power sensor
    power:
      id: power
      name: ${device_name}_power
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        # Make everything below 1W appear as just 0W.
        - lambda: if (x < 2) return 0; else return x;
        
  # Total daily energy sensor
  - platform: total_daily_energy
    name: ${device_name}_daily_energy
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

switch:
  # Switch to restart the plug
  - platform: restart
    name: ${device_name}_restart
    
  # Switch to toggle the relay
  - platform: gpio
    id: relay
    name: ${device_name}_switch
    pin: GPIO12

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    id: button
    name: ${device_name}_button
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      - switch.toggle: relay
  # This binary sensor tells if the Dryer is powered on itself (display)
  
  - platform: template
    name: ${device_name}_on
    filters:
      - delayed_off: 10s
    lambda: |-
      return id(power).state > 2;
  # This binary sensor tells if the Dryer is running or not
  - platform: template
    name: ${device_name}_running
    filters:
      - delayed_off: 15s
    lambda: |-
      return id(power).state > 75;
      
  - platform: status
    name: ${device_name} Sensor Status

# Uses the blue LED as status indicator
status_led:
  pin:
    number: GPIO13
    inverted: true